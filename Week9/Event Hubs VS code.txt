Event Hubs Demo Code:

1.	add the using statements: 

using Microsoft.Azure.EventHubs;
using System.Text;
using System.Threading.Tasks; 

2.	add the constants: 

private static EventHubClient eventHubClient;
private const string EhConnectionString = "{Event Hubs connection string}";
private const string EhEntityPath = "{Event Hub path/name}";
 
3.	add a new method: 

private static async Task MainAsync(string[] args)
{
    // Creates an EventHubsConnectionStringBuilder object from the connection string, and sets the EntityPath.
    // Typically, the connection string should have the entity path in it, but for the sake of this simple scenario
    // we are using the connection string from the namespace.
    var connectionStringBuilder = new EventHubsConnectionStringBuilder(EhConnectionString)
    {
        EntityPath = EhEntityPath
    };

    eventHubClient = EventHubClient.CreateFromConnectionString(connectionStringBuilder.ToString());

    await SendMessagesToEventHub(100);

    await eventHubClient.CloseAsync();

    Console.WriteLine("Press ENTER to exit.");
    Console.ReadLine();
}

4.	add another new method: 

// Creates an event hub client and sends 100 messages to the event hub.
private static async Task SendMessagesToEventHub(int numMessagesToSend)
{
    for (var i = 0; i < numMessagesToSend; i++)
    {
        try
        {
            var message = $"Message {i}";
            Console.WriteLine($"Sending message: {message}");
            await eventHubClient.SendAsync(new EventData(Encoding.UTF8.GetBytes(message)));
        }
        catch (Exception exception)
        {
            Console.WriteLine($"{DateTime.Now} > Exception: {exception.Message}");
        }

        await Task.Delay(10);
    }

    Console.WriteLine($"{numMessagesToSend} messages sent.");
}

5.	Add this to your main: 

MainAsync(args).GetAwaiter().GetResult(); 
IOT Hubs Demo Code:
Create Device Identity Key
1.	Add the using statements: 

using Microsoft.Azure.Devices;
using Microsoft.Azure.Devices.Common.Exceptions;

2.	Add these fields to the Program class: 

static RegistryManager registryManager;
static string connectionString = "{iot hub connection string}";

3.	Add the following method: 

private static async Task AddDeviceAsync()
 {
     string deviceId = "myFirstDevice";
     Device device;
     try
     {
         device = await registryManager.AddDeviceAsync(new Device(deviceId));
     }
     catch (DeviceAlreadyExistsException)
     {
         device = await registryManager.GetDeviceAsync(deviceId);
     }
     Console.WriteLine("Generated device key: {0}", device.Authentication.SymmetricKey.PrimaryKey);
 }

4.	Add the following to your main class: 

registryManager = RegistryManager.CreateFromConnectionString(connectionString);
 AddDeviceAsync().Wait();
 Console.ReadLine();


Receive Device to Cloud Messages
1.	Add the using statements: 

using Microsoft.ServiceBus.Messaging;
using System.Threading;

2.	Add the following fields: 

static string connectionString = "{iothub connection string}";
static string iotHubD2cEndpoint = "messages/events";
static EventHubClient eventHubClient;

3.	Add the following method: 

private static async Task ReceiveMessagesFromDeviceAsync(string partition, CancellationToken ct)
{
    var eventHubReceiver = eventHubClient.GetDefaultConsumerGroup().CreateReceiver(partition, DateTime.UtcNow);
    while (true)
    {
        if (ct.IsCancellationRequested) break;
        EventData eventData = await eventHubReceiver.ReceiveAsync();
        if (eventData == null) continue;

        string data = Encoding.UTF8.GetString(eventData.GetBytes());
        Console.WriteLine("Message received. Partition: {0} Data: '{1}'", partition, data);
    }
}

 
4.	Add the following to the main: 
Console.WriteLine("Receive messages. Ctrl-C to exit.\n");
eventHubClient = EventHubClient.CreateFromConnectionString(connectionString, iotHubD2cEndpoint);

var d2cPartitions = eventHubClient.GetRuntimeInformation().PartitionIds;

CancellationTokenSource cts = new CancellationTokenSource();

System.Console.CancelKeyPress += (s, e) =>
{
    e.Cancel = true;
    cts.Cancel();
    Console.WriteLine("Exiting...");
};

var tasks = new List<Task>();
foreach (string partition in d2cPartitions)
{
    tasks.Add(ReceiveMessagesFromDeviceAsync(partition, cts.Token));
}  
Task.WaitAll(tasks.ToArray());

